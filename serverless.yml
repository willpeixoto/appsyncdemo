service:
  name: demo-appsync
# app and org for use with dashboard.serverless.com
app: demo-appsync
org: willpeixoto

plugins:
  - serverless-webpack
  - serverless-plugin-additional-stacks
  - serverless-appsync-plugin

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  default: ${self:service.name}-${self:provider.stage}
  account: ${file(./env/env.${self:provider.stage}.yml):account_id}
  dynamo: ${file(./env/env.${self:provider.stage}.yml):tables}
  dynamodbStackName: ${self:custom.default}-dynamodb
  cognitoStackName: ${self:custom.default}-cognito
  userPoolId:
    Fn::ImportValue: ${self:custom.default}-UserPoolId

  role:
    arn: arn:aws:iam::${self:custom.account}:role
    cognito:
      auth:
        name: ${self:custom.default}-auth-cognitoRole
        arn: ${self:custom.role.arn}/${self:custom.role.cognito.auth.name}
    logging:
      name: ${self:custom.default}-Logging-AppSyncServiceRole
      arn:
        Fn::GetAtt:
          - AppSyncLoggingServiceRole
          - Arn
    dynamodb:
      name: ${self:custom.default}-DynamoDB-AppSyncServiceRole
      arn: ${self:custom.role.arn}/${self:custom.role.dynamodb.name}
    lambda:
      name: ${self:custom.default}-Lambda-AppSyncServiceRole
      arn: ${self:custom.role.arn}/${self:custom.role.lambda.name}
  additionalStacks:    
    dynamodbResourcesStack:
      Deploy: Before
      StackName: ${self:custom.dynamodbStackName}
      Resources: ${file(./resources/dynamodb.yml)}
    #because appSync we need to add cognito support for our api, and we need to expose te output
    cognitoResourcesStack:
      Deploy: Before
      StackName: ${self:custom.cognitoStackName}
      Resources: ${file(./resources/cognito.yml)}
      Outputs: ${file(./resources/cognito-output.yml)}

  appSync:
    name: ${self:custom.default}-api  # defaults to api
    # apiKey # only required for update-appsync/delete-appsync
    authenticationType: AMAZON_COGNITO_USER_POOLS
    schema: # schema file or array of files to merge, defaults to schema.graphql
    # if AMAZON_COGNITO_USER_POOLS
    userPoolConfig:
      awsRegion: # defaults to provider region
      defaultAction: DENY # required # ALLOW or DENY
      userPoolId: ${self:custom.userPoolId} # required # user pool ID
    logConfig:
      loggingRoleArn: { Fn::GetAtt: [AppSyncLoggingServiceRole, Arn] } # Where AppSyncLoggingServiceRole is a role with CloudWatch Logs write access
      level: ALL # Logging Level: NONE | ERROR | ALL
      excludeVerboseContent: false
    mappingTemplatesLocation: "mapping-templates"
    mappingTemplates:
      - dataSource: Events # data source name
        type: Mutation # type name in schema (e.g. Query, Mutation, Subscription, or a custom type e.g. User)
        field: createEvent        
        request: "request/dynamodb/create-event-mapping-template.vtl" # request mapping template name | defaults to {type}.{field}.request.vtl
        response: "response/generic-response-mapping-template.vtl"    
      - dataSource: Events
        type: Query
        field: batchGetEvents
        request: "request/dynamodb/batch-get-events-request-mapping-template.vtl"
        response: "response/batch-get-events-response-mapping-template.vtl"
      - dataSource: Events
        type: Query
        field: getEvent
        request: "request/dynamodb/get-item-request-mapping-template.vtl"
        response: "response/generic-response-mapping-template.vtl"
    dataSources:    
      - type: AMAZON_DYNAMODB
        name: Events # data source name
        description: 'Events table' # DynamoDB Table Description
        config:
          tableName: ${self:custom.dynamo.events} # Where MyTable is a dynamodb table defined in Resources          
      # - type: AWS_LAMBDA
      #   name: create something # data source name
      #   description: 'Lambda DataSource'
      #   config:
      #     functionName: graphql # The function name in your serverless.yml. Ignored if lambdaFunctionArn is provided.
      #     lambdaFunctionArn: { Fn::GetAtt: [GraphqlLambdaFunction, Arn] } # Where GraphqlLambdaFunction is the lambda function cloudformation resource created by serverless for the serverless function named graphql          
provider:
  name: aws
  runtime: nodejs12.x
  region: us-west-2
  timeout: 90
  stage: ${opt:stage, "dev"}
  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

functions:
  graphql:
    handler: handler.graphqlHandler
    events:
    - http:
        path: graphql
        method: post
        cors: true

resources: ${file(./resources/resources.yml)}